struct Graph:
    var data: Dict[String, List[String]]

    fn __init__(inout self):
        self.data = Dict[String, List[String]]()

    fn add_vertex(inout self, vertex: String) raises:
        var v = self.data.find(vertex)
        if v:
            raise Error("Attempting to add duplicate node")
        else:
            self.data[vertex] =  List[String]()
    
    fn add_edge(inout self, vertex_a: String, vertex_b: String) raises:
        var va = self.data.find(vertex_a)
        if not va:
            raise Error("Vertex " + vertex_a + " not found")
        
        var vb = self.data.find(vertex_b)
        if not vb:
            raise Error("Vertex " + vertex_b + " not found")

        self.data[vertex_a].append(vertex_b)

    fn dump(self):
        for vertex in self.data.items():
            var output = "" + vertex[].key + " -> [ "
            for edge in vertex[].value:
                output += "" + edge[] + " "
            output += "]"
            print(output)


fn find_path(g: Graph, start: String, end: String, owned path: List[String] = List[String]()) raises -> List[String]:
    if start == end:
        return path
    if not g.data.find(start):
        return List[String]()
    for i in range(len(g.data[start])):
        var node = g.data[start][i]
        var node_in_path = False
        for j in range(len(path)):
            if node == path[j]:
                node_in_path = True
                break
        if not node_in_path:
            var new_path = find_path(g, node, end, path)
            if len(new_path) > 0: return new_path
    return List[String]()

fn main():
    try:
        var graph = Graph()

        graph.add_vertex("A")
        graph.add_vertex("B")
        graph.add_vertex("C")
        graph.add_vertex("D")
        graph.add_vertex("E")
        graph.add_vertex("F")

        graph.add_edge("A", "B")
        graph.add_edge("B", "C")
        graph.add_edge("C", "D")
        graph.add_edge("A", "E")
        graph.add_edge("E", "F")

        graph.dump()


        var start = String("A")
        var end = String("D")
        var path = find_path(graph, start, end)
        if len(path) < 1:
            print("no path found")
        else:
            var output = String("path[" + start + " -> " + end + "]: ")
            for step in range(len(path)):
                if step == len(path) - 1:
                    output += "" + path[step] + ";"
                else:
                    output += "" + path[step] + ","
            print(output)
    except e:
        print(e)
