# Parameterization: Compile-time Metaprogramming
#
# In Mojo parameter is a compile-time variable that becomes a runtime
# constant, declared in square brackets on a function or struct.
#
# Parameters allow for compile-time metaprogramming enabling
# generation or modification of code at compile time.

fn main():
    repeat[3]("Hello")
    var my_array = GenericArray[Int](1,2,3,4)
    try:
        for i in range(my_array.size):
            print(my_array[i], sep=",", end="")
    except e:
        print(e)

fn repeat[count: Int](msg: String):
    # The @unroll directive unrolls loops at compile time. This only
    # workds if the loop limits are compile-time constants
    @unroll
    for i in range(count):
        print(msg)

struct GenericArray[T: AnyRegType]:
    var data: Pointer[T]
    var size: Int

    fn __init__(inout self, *elements: T):
        self.size = len(elements)
        self.data = Pointer[T].alloc(self.size)
        for i in range(self.size):
            self.data[i] = elements[i]
    
    fn __del__(owned self):
        self.data.free()

    fn __getitem__(self, i: Int) raises -> T:
        if (i < self.size):
            return self.data[i]
        else:
            raise Error("out of bounds")