# Meta Programmable Functional Notebooks

```elixir
Mix.install([
  {:kino, "~> 0.9.0"},
  {:kino_vega_lite, "~> 0.1.7"}
])
```

## Exploring Concurrency

```elixir
for _ <- 1..1_000_000 do
  spawn(fn -> :ok end)
end
```

```elixir
child =
  spawn(fn ->
    receive do
      {:ping, caller} -> send(caller, {:pong})
    end
  end)

send(child, {:ping, self()})

receive do
  {:pong} -> :it_worked!
end
```

Livebook can help developers see how processes communicate between eachother

```elixir
Kino.Process.render_seq_trace(fn ->
  child =
    spawn(fn ->
      receive do
        {:ping, from} -> send(from, :pong)
      end
    end)

  send(child, {:ping, self()})

  receive do
    :pong -> :it_worked!
  end
end)
```

A developer can also observe how Elixir can perform multiple tasks at once, scaling on both CPU and IO

```elixir
Kino.Process.render_seq_trace(fn ->
  1..4
  |> Task.async_stream(
    fn _ -> Process.sleep(Enum.random(100..300)) end,
    max_concurrency: 4
  )
  |> Stream.run()
end)
```

Messages can also be distributed across nodes. Here the notebook tries to use a `Distributed` module but it does not exist

```elixir
Distributed.hello_world()
```

If the `Distributed` module is [defined in another notebook](/Users/charlie/github.com/charlieroth/lab/elixir/concurrency_distributed.livemd) (another Erlang VM instance), it could be used via an `:erpc` call

```elixir
node =
  Kino.Input.text("Node")
  |> Kino.render()
  |> Kino.Input.read()
  |> String.to_atom()

cookie =
  Kino.Input.text("Cookie")
  |> Kino.render()
  |> Kino.Input.read()
  |> String.to_atom()

Node.set_cookie(node, cookie)
:erpc.call(node, Distributed, :hello_world, [])
```

<!-- livebook:{"branch_parent_index":0} -->

## Livebook: Branched Sections

```elixir
Kino.Mermaid.new("""
flowchart TB
    subgraph "Section #1"
      A[Cell A]-->B[Cell B]
    end

    subgraph "Branch From #1"
      E[Cell E]-->F[Cell F]
      B-->E
    end
    
    subgraph "Section #2"
      C[Cell C]-->D[Cell D]
      B-->C
    end
""")
```

The above diagram is meant to visualize how a `Section` and `Branch` are actually running as separate processes and because of the concurrency of Elixir, the below infinite loop will not cause an disruption to other sections of this notebook

```elixir
frame = Kino.Frame.new() |> Kino.render()

for _ <- Stream.interval(1000) do
  Kino.Frame.render(frame, :erlang.memory())
end
```

## Multiplayer Runtime

Your code runs in a separate Erlang VM instance using the distribution channels shown earlier

```elixir
Kino.Mermaid.new("""
flowchart LR
    subgraph "Livebook"
      A[Session]
    end

    A-->erldist

    subgraph erldist["Erlang Distribution"]
    end

    erldist-->C

    subgraph "Runtime"
     C[Code]
    end
""")
```

This creates a separation of concerns where the code knowns nothing about Livebook. The [Kino](https://hexdocs.pm/kino/Kino.html) library is the one responsible for connecting both sides and supporting additional features such as rendering of outputs.

Any developer can create their own outputs. There are two kinds: `static` and `live`

Here is an example of a counter as live output

```elixir
defmodule CounterExample do
  use Kino.JS
  use Kino.JS.Live

  def new(count) do
    Kino.JS.Live.new(__MODULE__, count)
  end

  @impl true
  def init(count, ctx) do
    {:ok, assign(ctx, count: count)}
  end

  @impl true
  def handle_connect(ctx) do
    {:ok, ctx.assigns.count, ctx}
  end

  @impl true
  def handle_event("bump", _, ctx) do
    ctx = update(ctx, :count, &(&1 + 1))
    broadcast_event(ctx, "update", ctx.assigns.count)
    {:noreply, ctx}
  end

  asset "main.js" do
    """
    export function init(ctx, count) {
      ctx.root.innerHTML = `
        <div id="count"></div>
        <button id="bump" style="margin: 2px 0;">Bump</button>
      `;

      const countEl = document.getElementById("count");
      countEl.innerHTML = count;
      
      const bumpEl = document.getElementById("bump");
      bumpEl.addEventListener("click", (event) => {
        ctx.pushEvent("bump");
      });

      ctx.handleEvent("update", (count) => {
        countEl.innerHTML = count;
      })
    }
    """
  end
end

CounterExample.new(0)
```

If you open this same notebook in another tab you will see that both Livebook and the outputs are collaborative, opening the way to even run games inside your notebooks

## Smart-Cells: Meta-Programmable Notebooks

The Erlang VM provides a great set of tools for obserability. Let's gather information about all processes:

```elixir
processes =
  for pid <- Process.list() do
    info = Process.info(pid, [:reductions, :memory, :status])

    %{
      pid: inspect(pid),
      reductions: info[:reductions],
      memory: info[:memory],
      status: info[:status]
    }
  end
```

Maybe we can plot it? This might require us to learn some plotting library, etc.

Livebook, inspired by ["Mage" by Mary Beth Kerry et. al](https://arxiv.org/abs/2009.10643), has `Smart Cells`

Even though Smart Cells seem like this complex thing that could possible interfer with your program execution, they are actually quite "dumb".

A Smart Cell is simple a function that is executed like any other code in this Livebook. Since they are just functions (or functions within modules), these can be created and shared amongst developers via the `hex` package manager.

When a Smart Cell is used in a Livebook, it simply copys the code into the Livebook and executes. This code can be inspected via the `<>` button on top of the cell so you can inspect (and learn) how this Smart Cell works "under the hood".

Smart Cells can even be ejected into a regular Code Cell so you the developer are not locked into the functionality of the default UI experience.

<!-- livebook:{"attrs":{"chart_title":"Running Processes","height":200,"layers":[{"active":true,"chart_type":"point","color_field":"status","color_field_aggregate":null,"color_field_bin":null,"color_field_scale_scheme":null,"color_field_type":"nominal","data_variable":"processes","geodata_color":"blue","latitude_field":null,"longitude_field":null,"x_field":"memory","x_field_aggregate":null,"x_field_bin":null,"x_field_scale_type":"log","x_field_type":"quantitative","y_field":"reductions","y_field_aggregate":null,"y_field_bin":null,"y_field_scale_type":"log","y_field_type":"quantitative"}],"vl_alias":"Elixir.VegaLite","width":350},"chunks":null,"kind":"Elixir.KinoVegaLite.ChartCell","livebook_object":"smart_cell"} -->

```elixir
VegaLite.new(width: 350, height: 200, title: "Running Processes")
|> VegaLite.data_from_values(processes, only: ["memory", "reductions", "status"])
|> VegaLite.mark(:point)
|> VegaLite.encode_field(:x, "memory", type: :quantitative, scale: [type: :log])
|> VegaLite.encode_field(:y, "reductions", type: :quantitative, scale: [type: :log])
|> VegaLite.encode_field(:color, "status", type: :nominal)
```
