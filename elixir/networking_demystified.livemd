<!-- livebook:{"persist_outputs":true} -->

# Notes: Bandit On The Loose! Networking In Elixir Demysitfied

## Simple :gen_tcp Server & Client

In order to see this example run in action. You will need to run `SimpleServer.start()` in one `iex` shell and then `SimpleClient.recv()` in another `iex` shell

```elixir
defmodule SimpleServer do
  def start() do
    {:ok, listen_socket} = :gen_tcp.listen(4000, active: false)
    accept_and_handle(listen_socket)
  end

  def accept_and_handle(listen_socket) do
    {:ok, socket} = :gen_tcp.accept(listen_socket)
    :gen_tcp.send(socket, "Hello, world")
    :gen_tcp.close(socket)
    accept_and_handle(listen_socket)
  end
end

defmodule SimpleClient do
  def recv() do
    {:ok, socket} = :gen_tcp.connect('localhost', 4000, active: false)
    {:ok, data} = :gen_tcp.recv(socket, 0)
    IO.puts(data)
    :gen_tcp.close(socket)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, SimpleClient, <<70, 79, 82, 49, 0, 0, 7, ...>>, {:recv, 0}}
```

The Stack So Far

```mermaid
graph TD;
  subgraph TCP/IP
    A[ERTS - :gen_tcp / :ssl]-->B[OS - sys/socket.h]
  end
```

<!-- livebook:{"break_markdown":true} -->

### Socket Review

These are the essentials to implement a server however working this low level is tedious and performant patterns are non-trivial. These patterns are usually abstracted to a "socket server"

### Socket Server

* Useful abstraction of raw sockets
* Underneath a higher level application (e.g., HTTP Server)
* Listens for client connections over configured socket type (e.g., TCP/SSL)
* Hands individual connections to an upper protocol layer (e.g., HTTP Layer)
* Handles transport concerns: SSL/TLS negotiation, connection draining, etc.
* All done efficiently and scalably

### Who is a Socket Server?

* `:ranch` is the current goto implementation server on the BEAM. Server that supports `:cowboy` HTTP server
* `:thousand_island` is a new pure-Elixir socket server with numerous improvements
  * Performance is ~equal
  * `1/2` the size of `:ranch` in terms of LOC
  * Supports TCP, TLS, & Unix Domain sockets
  * Fully wired for telemtry including socket-level tracing
  * Simple and powerful Handler behaviour

## Thousand Island

[github.com/mtrudel/thousand_island](https://github.com/mtrudel/thousand_island)

### Thousand Island Handler Process

`:thousand_island` exposes a `ThousandIsland.Handler` behaviour which a module implements

1 process per connection

A `ThousandIsland.Handler` module is just a `GenServer` under the hood

* This allows connections processes to do all the normal `GenServer` things making your `ThousandIsland.Handler` easily extensible
* Recieves are async by default (via `handle_data/3`) but can also write "traditional" blocking network code if you wish, anywhere

### Thousand Island Process Model

Handler processes are hosted within a process tree

Rooted in `ThousandIsland.start_link/1` call which starts the server

Process tree is entirely self-contained

Multi-level process tree designed to minimize contention

Highlights the power of OTP design patterns

<!-- livebook:{"break_markdown":true} -->

The Stack So Far

```mermaid
graph TD;
  subgraph Socket Server
    C[Thousand Island]-->TCP/IP
  end

  subgraph TCP/IP
    A[ERTS - :gen_tcp / :ssl]-->B[OS - sys/socket.h]
  end
```

## HTTP

### What is HTTP?

HTTP/1.x is plain text over sockets. Defined primarily by RFC 2616

```
> GET /thing/12 HTTP/1.1
> host: www.example.com
> [... other headers ...]
> [empty line]
> [body content]

< HTTP/1.1 200 OK
< content-length: 123
< [... other headers ...]
< [empty line]
< [body content]
```

##### Simple HTTP Server with `ThousandIsland`

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule HelloWorldHTTP do
  use ThousandIsland.Handler

  @impl ThousandIsland.Handler
  def handle_data(_data, socket, state) do
    ThousandIsland.Socket.send(socket, "HTTP/1.1 200 OK\r\n\r\nHello, World")
    {:close, state}
  end
end

```

### What Does An HTTP Server Do?

A complete HTTP/1.x implementation is not much more complicated than the example above

* Parses & validates request and header lines (possibly request body)
* Sends conformant responses back to the client

### Who is an HTTP Server?

`:cowboy` is the current goto HTTP server on the BEAM

* Complete HTTP/1.1, HTTP/2, Websocket server

`:bandit` is a new pure-Elixir HTTP server for Plug applications

## Bandit

### Bandit: A HTTP Server for Plug Applications

100% Elixir, Plug-native, Robust HTTP/1.1 and HTTP/2 conformance

Written from the ground up for correctness, performance & clarity

Incredible performance

### Making an HTTP server do useful things

HTTP server return content to clients. The hand off to server-app logic is handled by `Plug`

### `Plug`

An abstraction of HTTP Req/Res pairs

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule HelloWorldPlug do
  def init(opts), do: opts

  def call(%Plug.Conn{} = conn, _opts) do
    Plug.Conn.send_resp(conn, 200, "Hello, World!")
  end
end
```

`Plug` comes with built-in Plugs that are usually enough for any web application

### `Plug` Servers

Plug is implemented in `:cowboy` via the `Plug.Cowboy` adapter

`Bandit` is `Plug`-native

<!-- livebook:{"break_markdown":true} -->

The Stack So Far

```mermaid
graph TD;
  subgraph Plug
    D[Bandit]-->SocketServer
  end

  subgraph SocketServer
    C[Thousand Island]-->TCP/IP
  end

  subgraph TCP/IP
    A[ERTS - :gen_tcp / :ssl]-->B[OS - sys/socket.h]
  end
```

## Phoenix

The HTTP part of Phoenix is "just" a `Plug`

Phoenix Websocket support is a different thing

<!-- livebook:{"break_markdown":true} -->

The Stack So Far

```mermaid
graph TD;
  subgraph API
    E[Phoenix]-->Plug
  end

  subgraph Plug
    D[Bandit]-->ThousandIsland.Handler
  end

  subgraph ThousandIsland.Handler
    C[Thousand Island]-->:gen_tcp/:ssl
  end

  subgraph :gen_tcp/:ssl
    A[ERTS]-->B[OS - sys/socket.h]
  end
```

## Bandit: A Closer Look

*Up To 5X faster than Cowboy*

### HTTP/1.1 In Bandit

1 process per connection. Cowboy uses 2 processes per connection

1:1 mapping between `ThousandIsland.Handler.handle_data/3` calls and `Plug.call/2` calls leading to straightforward, linear code

### HTTP/2 In Bandit

1 process per connection + 1 process per stream

Connection process implements `ThousandIsland.Handler`

Stream processes make the `Plug` calls

`iodata` everywhere for speed and memory efficiency

### Where Is Bandit Today?

[mtrudel/bandit: Project Status](https://github.com/mtrudel/bandit#project-status)

TLDR; drop-in replacement for Cowboy and support Phoenix applications
