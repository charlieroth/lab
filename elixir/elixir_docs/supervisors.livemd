<!-- livebook:{"persist_outputs":true} -->

# Supervisors

## Key-Value Bucket

```elixir
defmodule KV.Bucket do
  use Agent

  def start_link(opts) do
    Agent.start_link(fn -> %{} end, opts)
  end

  def put(agent, key, value) do
    Agent.update(agent, fn state ->
      Map.put(state, key, value)
    end)
  end

  def get(agent, key) do
    Agent.get(agent, fn state ->
      Map.get(state, key)
    end)
  end

  def del(agent, key) do
    Agent.get_and_update(agent, fn state ->
      Map.pop(state, key)
    end)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, KV.Bucket, <<70, 79, 82, 49, 0, 0, 13, ...>>, {:del, 2}}
```

## Key-Value Registry

```elixir
defmodule KV.Registry do
  use GenServer
  require Logger

  # ==== Client API ====

  def start_link(opts) do
    GenServer.start_link(__MODULE__, :ok, opts)
  end

  def lookup(server, name) do
    GenServer.call(server, {:lookup, name})
  end

  def create(server, name) do
    GenServer.cast(server, {:create, name})
  end

  # ==== Server API ====

  @impl true
  def init(:ok) do
    names = %{}
    refs = %{}
    {:ok, {names, refs}}
  end

  @impl true
  def handle_call({:lookup, name}, _from, state) do
    {names, _} = state
    {:reply, Map.fetch(names, name), state}
  end

  @doc """
  The registry is both linking and monitoring the buckets

  This is a bad idea as we don't want to link the bucket to the registry

  Instead we should link each bucket to a special type of process called Supervisors
  """
  @impl true
  def handle_cast({:create, name}, {names, refs}) do
    if Map.has_key?(names, name) do
      {:noreply, {names, refs}}
    else
      {:ok, bucket} = KV.Bucket.start_link([])
      ref = Process.monitor(bucket)
      refs = Map.put(refs, ref, name)
      names = Map.put(names, name, bucket)
      {:noreply, {names, refs}}
    end
  end

  @impl true
  def handle_info({:DOWN, ref, :process, _pid, _reason}, {names, refs}) do
    {name, refs} = Map.pop(refs, ref)
    names = Map.delete(names, name)
    {:noreply, {names, refs}}
  end

  @impl true
  def handle_info(msg, state) do
    Logger.debug("Unexpected message: #{inspect(msg)}")
    {:noreply, state}
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, KV.Registry, <<70, 79, 82, 49, 0, 0, 22, ...>>, {:handle_info, 2}}
```

```elixir
KV.Registry.child_spec([])
```

<!-- livebook:{"output":true} -->

```
%{id: KV.Registry, start: {KV.Registry, :start_link, [[]]}}
```

## Key-Value Supervisor

```elixir
defmodule KV.Supervisor do
  use Supervisor

  def start_link(opts) do
    Supervisor.start_link(__MODULE__, :ok, opts)
  end

  @impl true
  def init(:ok) do
    children = [
      KV.Registry
    ]

    Supervisor.init(children, strategy: :one_for_one)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, KV.Supervisor, <<70, 79, 82, 49, 0, 0, 10, ...>>, {:init, 1}}
```

```elixir
{:ok, pid} = KV.Supervisor.start_link([])
Supervisor.which_children(pid)
Supervisor.stop(pid)
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Test Suite

```elixir
ExUnit.start(auto_run: false)

defmodule KV.BucketTest do
  use ExUnit.Case, async: true

  setup do
    bucket = start_supervised!(KV.Bucket)
    %{bucket: bucket}
  end

  test "stores values by key", %{bucket: bucket} do
    assert KV.Bucket.get(bucket, "milk") == nil
    KV.Bucket.put(bucket, "milk", 3)
    assert KV.Bucket.get(bucket, "milk") == 3
  end

  test "deletes an existing key", %{bucket: bucket} do
    KV.Bucket.put(bucket, "milk", 3)
    assert KV.Bucket.get(bucket, "milk") == 3
    KV.Bucket.del(bucket, "milk")
    assert KV.Bucket.get(bucket, "milk") == nil
  end
end

defmodule KV.RegistryTest do
  use ExUnit.Case, async: true

  setup do
    registry = start_supervised!(KV.Registry)
    %{registry: registry}
  end

  test "spawns bucket", %{registry: registry} do
    assert KV.Registry.lookup(registry, "shopping") == :error

    KV.Registry.create(registry, "shopping")
    assert {:ok, bucket} = KV.Registry.lookup(registry, "shopping")

    KV.Bucket.put(bucket, "milk", 1)
    assert KV.Bucket.get(bucket, "milk") == 1
  end

  test "removes a bucket on exit", %{registry: registry} do
    KV.Registry.create(registry, "shopping")
    {:ok, bucket} = KV.Registry.lookup(registry, "shopping")
    Agent.stop(bucket)
    assert KV.Registry.lookup(registry, "shopping") == :error
  end
end

ExUnit.run()
```

<!-- livebook:{"output":true} -->

```
....
Finished in 0.00 seconds (0.00s async, 0.00s sync)
4 tests, 0 failures

Randomized with seed 839994
```

<!-- livebook:{"output":true} -->

```
%{excluded: 0, failures: 0, skipped: 0, total: 4}
```
